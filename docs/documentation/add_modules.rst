.. _add-modules:

##############################################
How to add custom OpenMDAO modules to FAST-OAD
##############################################

With FAST-OAD, you can register any OpenMDAO system of your own so it can be
used through the configuration file.

To have your OpenMDAO system available in FAST-OAD, you should follow these steps:

.. contents::
   :local:
   :depth: 1

***************************
Create your OpenMDAO system
***************************

It can be a `Group <http://openmdao.org/twodocs/versions/latest/features/core_features/grouping_components/index.html>`_
or a `Component <http://openmdao.org/twodocs/versions/latest/features/core_features/defining_components/index.html>`_-like class
(generally an `ExplicitComponent <http://openmdao.org/twodocs/versions/latest/features/core_features/defining_components/explicitcomp.html>`_).

You can create the Python file at the location of your choice. You will just have to provide later the folder path in
FAST-OAD configuration file (see :ref:`add-modules-set-configuration-files`).

Variable naming
===============
You have to pay attention to the naming of your input and output variables.
As FAST-OAD uses the `promotion system of OpenMDAO <http://openmdao.org/twodocs/versions/latest/basic_guide/promote_vs_connect.html>`_,
which means that variables you want to link to the rest of the process must have
the name that is given in the global process.

Nevertheless, you can create new variables for your system:

- Outputs of your system will be available in output file and will be usable as any other variable.
- Unconnected inputs will simply have to be in the input file of the process. They will be automatically included in the
  input file generated by FAST-OAD (see :ref:`generate-input-file`).
- And if you add more than one system to the FAST-OAD process, outputs created by one of your system can of course be
  used as inputs by other systems.

Also keep in mind that the naming of your variable will decide of its location in the input and output files.
Therefore, the way you name your new variables should be consistent with FAST-OAD convention, as explained in
:ref:`variables`.

Definition of partial derivatives
=================================
Your OpenMDAO system is expected to provide partial derivatives for all its outputs in analytic or approximate way.

At the very least, for most Component classes, the :code:`setup()` method of your class should contain:

.. code-block:: python

    self.declare_partials("*", "*", method='fd')

or for a Group class:

.. code-block:: python

    self.approx_totals()

The two lines above are the most generic and the least CPU-efficient ways of declaring partial derivatives. For better
efficiency, see how to `work with derivatives in OpenMDAO <http://openmdao.org/twodocs/versions/latest/features/core_features/working_with_derivatives/index.html>`_.

About ImplicitComponent classes
===============================
In some cases, you may have to use `ImplicitComponent <http://openmdao.org/twodocs/versions/latest/features/core_features/defining_components/implicitcomp.html>`_
classes.

Just remember, as told in `this tutorial <http://openmdao.org/twodocs/versions/latest/advanced_guide/implicit_comps/defining_icomps.html>`_,
that the loop that will allow to solve it needs usage of the `NewtonSolver <http://openmdao.org/twodocs/versions/latest/features/building_blocks/solvers/nonlinear/newton.html#nlnewton>`_.

A good way to ensure it is to build a Group class that will solve the ImplicitComponent with NewtonSolver. This Group
should be the system you will register in FAST-OAD.

.. _add-modules-register-systems:

***********************
Register your system(s)
***********************

Once your OpenMDAO system is ready, you have to register it to make it discoverable by FAST-OAD. Assuming your OpenMDAO
class is named `MyOMClass` in `my_module.py`, you can create, in the same folder, the file `register.py` with following
lines:

  .. code-block:: python

    from my_module import MyOMClass
    from fastoad.module_management import OpenMDAOSystemRegistry

    OpenMDAOSystemRegistry.register_system(MyOMClass, "my.custom.name")

.. _add-modules-set-configuration-files:

*****************************
Modify the configuration file
*****************************

The folder that contains these Python files must be listed in :code:`module_folders`
in the configuration file:

.. code-block:: TOML

    title = "OAD Process with custom component"

    # List of folder paths where user added custom registered OpenMDAO components
    module_folders = ["/path/to/my/custom/module/folder"]

Once this is done, (assuming your configuration file is named `my_custom_conf.toml`)
your custom, registered, system should appear in the list provided by the command:

.. code:: bash

      $ fastoad list_systems my_custom_conf.toml


Then your component can be used like any other using the id you have given.

.. code-block:: TOML

    # Definition of OpenMDAO model
    [model]
        [ ... ]

        [model.my_custom_model]
            id = "my.custom.name"

        [ ... ]
