# -*- coding: utf-8 -*-
"""
  disc1.py generated by WhatsOpt. 
"""
#      This file is part of FAST : A framework for rapid Overall Aircraft Design
#      Copyright (C) 2019  ONERA/ISAE
#      FAST is free software: you can redistribute it and/or modify
#      it under the terms of the GNU General Public License as published by
#      the Free Software Foundation, either version 3 of the License, or
#      (at your option) any later version.
#      This program is distributed in the hope that it will be useful,
#      but WITHOUT ANY WARRANTY; without even the implied warranty of
#      MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#      GNU General Public License for more details.
#      You should have received a copy of the GNU General Public License
#      along with this program.  If not, see <https://www.gnu.org/licenses/>.
from .disc1_base import Disc1Base


class Disc1(Disc1Base):
    """ An OpenMDAO component to encapsulate Disc1 discipline """

    def compute(self, inputs, outputs):
        """
        Evaluates the equation
        y1 = z1**2 + z2 + x1 - 0.2*y2
        """

        z1 = inputs['z'][0]
        z2 = inputs['z'][1]
        x1 = inputs['x']
        y2 = inputs['y2']

        outputs['y1'] = z1 ** 2 + z2 + x1 - 0.2 * y2

# Reminder: inputs of compute()
#   
#       inputs['x'] -> shape: 1, type: Float    
#       inputs['z'] -> shape: 1, type: Float    
#       inputs['y2'] -> shape: 1, type: Float      

# To declare partial derivatives computation ...
# 
#    def setup(self):
#        super(Disc1, self).setup()
#        self.declare_partials('*', '*')  
#			
#    def compute_partials(self, inputs, partials):
#        """ Jacobian for Disc1 """
#   
#       	partials['y1', 'x'] = np.zeros((1, 1))
#       	partials['y1', 'z'] = np.zeros((1, 1))
#       	partials['y1', 'y2'] = np.zeros((1, 1))
